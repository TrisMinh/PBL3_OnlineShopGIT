﻿@using Microsoft.AspNetCore.Mvc.TagHelpers
@{
    var selectedCollection = ViewData["SelectedCollection"] as string ?? "";
    var openFilters = ViewBag.OpenFilters as List<string> ?? new List<string>();

    bool IsFilterOpen(string filterName)
    {
        return openFilters.Contains(filterName.ToLower().Replace(" ", ""));
    }
}

<aside class="filters">
    <h2 class="filters-title">Filters</h2>
    <!-- Category Filter -->
    <div class="filter-group">
        <a href="@Url.Action("ToggleFilterState", "Filter", new { filterType = "category" })" class="custom-toggle-header filter-group-header @(IsFilterOpen("Category") ? "is-active" : "")" style="cursor: pointer; display: block; text-decoration: none; color: inherit;">
            <span>Category</span>
            <i class="fa-solid fa-chevron-down"></i>
        </a>
        <div class="custom-toggle-content" style="display: @(IsFilterOpen("Category") ? "block" : "none");">
            <div class="filter-group-content filter-category-grid">
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "" })" class="filter-category-button @(string.IsNullOrEmpty(ViewBag.SelectedCategory) ? "active" : "")" data-filter-type="category" data-filter-value="">All</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Jackets" })" class="filter-category-button @(ViewBag.SelectedCategory == "Jackets" ? "active" : "")" data-filter-type="category" data-filter-value="Jackets">Jackets</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "T-Shirts" })" class="filter-category-button @(ViewBag.SelectedCategory == "T-Shirts" ? "active" : "")" data-filter-type="category" data-filter-value="T-Shirts">T-Shirts</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Polo Shirts" })" class="filter-category-button @(ViewBag.SelectedCategory == "Polo Shirts" ? "active" : "")" data-filter-type="category" data-filter-value="Polo Shirts">Polo Shirts</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Suits" })" class="filter-category-button @(ViewBag.SelectedCategory == "Suits" ? "active" : "")" data-filter-type="category" data-filter-value="Suits">Suits</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Jeans" })" class="filter-category-button @(ViewBag.SelectedCategory == "Jeans" ? "active" : "")" data-filter-type="category" data-filter-value="Jeans">Jeans</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Trousers" })" class="filter-category-button @(ViewBag.SelectedCategory == "Trousers" ? "active" : "")" data-filter-type="category" data-filter-value="Trousers">Trousers</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Shorts" })" class="filter-category-button @(ViewBag.SelectedCategory == "Shorts" ? "active" : "")" data-filter-type="category" data-filter-value="Shorts">Shorts</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Sportswear" })" class="filter-category-button @(ViewBag.SelectedCategory == "Sportswear" ? "active" : "")" data-filter-type="category" data-filter-value="Sportswear">Sportswear</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Dresses" })" class="filter-category-button @(ViewBag.SelectedCategory == "Dresses" ? "active" : "")" data-filter-type="category" data-filter-value="Dresses">Dresses</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Skirts" })" class="filter-category-button @(ViewBag.SelectedCategory == "Skirts" ? "active" : "")" data-filter-type="category" data-filter-value="Skirts">Skirts</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "category", value = "Coats" })" class="filter-category-button @(ViewBag.SelectedCategory == "Coats" ? "active" : "")" data-filter-type="category" data-filter-value="Coats">Coats</a>
            </div>
        </div>
    </div>

    <!-- Colors Filter -->
    <div class="filter-group">
        <a href="@Url.Action("ToggleFilterState", "Filter", new { filterType = "colors" })" class="custom-toggle-header filter-group-header @(IsFilterOpen("Colors") ? "is-active" : "")" style="cursor: pointer; display: block; text-decoration: none; color: inherit;">
            <span>Colors</span>
            <i class="fa-solid fa-chevron-down"></i>
        </a>
        <div class="custom-toggle-content" style="display: @(IsFilterOpen("Colors") ? "block" : "none");">
            <div class="filter-group-content filter-colors-grid">
                <a href="@Url.Action("Apply", "Filter", new { type = "color", value = "" })" class="filter-category-button @(string.IsNullOrEmpty(Context.Request.Query["color"]) ? "active" : "")" data-filter-type="color" data-filter-value="">All</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "color", value = "Black" })" class="filter-category-button @(Context.Request.Query["color"] == "Black" ? "active" : "")" data-filter-type="color" data-filter-value="Black">Black</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "color", value = "White" })" class="filter-category-button @(Context.Request.Query["color"] == "White" ? "active" : "")" data-filter-type="color" data-filter-value="White">White</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "color", value = "Blue" })" class="filter-category-button @(Context.Request.Query["color"] == "Blue" ? "active" : "")" data-filter-type="color" data-filter-value="Blue">Blue</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "color", value = "Red" })" class="filter-category-button @(Context.Request.Query["color"] == "Red" ? "active" : "")" data-filter-type="color" data-filter-value="Red">Red</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "color", value = "Green" })" class="filter-category-button @(Context.Request.Query["color"] == "Green" ? "active" : "")" data-filter-type="color" data-filter-value="Green">Green</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "color", value = "Yellow" })" class="filter-category-button @(Context.Request.Query["color"] == "Yellow" ? "active" : "")" data-filter-type="color" data-filter-value="Yellow">Yellow</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "color", value = "Brown" })" class="filter-category-button @(Context.Request.Query["color"] == "Brown" ? "active" : "")" data-filter-type="color" data-filter-value="Brown">Brown</a>
            </div>
        </div>
    </div>

    <!-- Size Filter -->
    <div class="filter-group">
        <a href="@Url.Action("ToggleFilterState", "Filter", new { filterType = "size" })" class="custom-toggle-header filter-group-header @(IsFilterOpen("Size") ? "is-active" : "")" style="cursor: pointer; display: block; text-decoration: none; color: inherit;">
            <span>Size</span>
            <i class="fa-solid fa-chevron-down"></i>
        </a>
        <div class="custom-toggle-content" style="display: @(IsFilterOpen("Size") ? "block" : "none");">
            <div class="filter-group-content filter-size-grid">
                <a href="@Url.Action("Apply", "Filter", new { type = "size", value = "" })" class="filter-category-button @(string.IsNullOrEmpty(Context.Request.Query["size"]) ? "active" : "")" data-filter-type="size" data-filter-value="">All</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "size", value = "XS" })" class="filter-category-button @(Context.Request.Query["size"] == "XS" ? "active" : "")" data-filter-type="size" data-filter-value="XS">XS</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "size", value = "S" })" class="filter-category-button @(Context.Request.Query["size"] == "S" ? "active" : "")" data-filter-type="size" data-filter-value="S">S</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "size", value = "M" })" class="filter-category-button @(Context.Request.Query["size"] == "M" ? "active" : "")" data-filter-type="size" data-filter-value="M">M</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "size", value = "L" })" class="filter-category-button @(Context.Request.Query["size"] == "L" ? "active" : "")" data-filter-type="size" data-filter-value="L">L</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "size", value = "XL" })" class="filter-category-button @(Context.Request.Query["size"] == "XL" ? "active" : "")" data-filter-type="size" data-filter-value="XL">XL</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "size", value = "2XL" })" class="filter-category-button @(Context.Request.Query["size"] == "2XL" ? "active" : "")" data-filter-type="size" data-filter-value="2XL">2X</a>
            </div>
        </div>
    </div>

    <!-- Price Range Filter -->
    <div class="filter-group">
        <a href="@Url.Action("ToggleFilterState", "Filter", new { filterType = "pricerange" })" class="custom-toggle-header filter-group-header @(IsFilterOpen("PriceRange") ? "is-active" : "")" style="cursor: pointer; display: block; text-decoration: none; color: inherit;">
            <span>Price Range</span>
            <i class="fa-solid fa-chevron-down"></i>
        </a>
        <div class="custom-toggle-content" style="display: @(IsFilterOpen("PriceRange") ? "block" : "none");">
            <div class="filter-group-content">
                <a href="@Url.Action("Apply", "Filter", new { type = "price", value = "" })" class="filter-category-button @(string.IsNullOrEmpty(Context.Request.Query["price"]) ? "active" : "")" data-filter-type="price" data-filter-value="">All</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "price", value = "under-500" })" class="filter-category-button @(Context.Request.Query["price"] == "under-500" ? "active" : "")" data-filter-type="price" data-filter-value="under-500">Under 500,000đ</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "price", value = "500-to-1m" })" class="filter-category-button @(Context.Request.Query["price"] == "500-to-1m" ? "active" : "")" data-filter-type="price" data-filter-value="500-to-1m">From 500,000đ - 1 million</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "price", value = "1m-to-2m" })" class="filter-category-button @(Context.Request.Query["price"] == "1m-to-2m" ? "active" : "")" data-filter-type="price" data-filter-value="1m-to-2m">From 1 - 2 million</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "price", value = "2m-to-4m" })" class="filter-category-button @(Context.Request.Query["price"] == "2m-to-4m" ? "active" : "")" data-filter-type="price" data-filter-value="2m-to-4m">From 2 - 4 million</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "price", value = "above-4m" })" class="filter-category-button @(Context.Request.Query["price"] == "above-4m" ? "active" : "")" data-filter-type="price" data-filter-value="above-4m">Above 4 million</a>
            </div>
        </div>
    </div>

    <!-- Collections Filter -->
    <div class="filter-group">
        <a href="@Url.Action("ToggleFilterState", "Filter", new { filterType = "collections" })" class="custom-toggle-header filter-group-header @(IsFilterOpen("Collections") ? "is-active" : "")" style="cursor: pointer; display: block; text-decoration: none; color: inherit;">
            <span>Collections</span>
            <i class="fa-solid fa-chevron-down"></i>
        </a>
        <div class="custom-toggle-content" style="display: @(IsFilterOpen("Collections") ? "block" : "none");">
            <div class="filter-group-content filter-collections-grid">
                <a href="@Url.Action("Apply", "Filter", new { type = "collection", value = "" })" class="filter-category-button @(string.IsNullOrEmpty(selectedCollection) ? "active" : "")" data-filter-type="collection" data-filter-value="">All</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "collection", value = "spring" })" class="filter-category-button @(selectedCollection.ToLower() == "spring" ? "active" : "")" data-filter-type="collection" data-filter-value="spring">Spring</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "collection", value = "summer" })" class="filter-category-button @(selectedCollection.ToLower() == "summer" ? "active" : "")" data-filter-type="collection" data-filter-value="summer">Summer</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "collection", value = "autumn" })" class="filter-category-button @(selectedCollection.ToLower() == "autumn" ? "active" : "")" data-filter-type="collection" data-filter-value="autumn">Autumn</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "collection", value = "winter" })" class="filter-category-button @(selectedCollection.ToLower() == "winter" ? "active" : "")" data-filter-type="collection" data-filter-value="winter">Winter</a>
            </div>
        </div>
    </div>

    <!-- Availability Filter -->
    <div class="filter-group">
        <a href="@Url.Action("ToggleFilterState", "Filter", new { filterType = "availability" })" class="custom-toggle-header filter-group-header @(IsFilterOpen("Availability") ? "is-active" : "")" style="cursor: pointer; display: block; text-decoration: none; color: inherit;">
            <span>Availability</span>
            <i class="fa-solid fa-chevron-down"></i>
        </a>
        <div class="custom-toggle-content" style="display: @(IsFilterOpen("Availability") ? "block" : "none");">
            <div class="filter-group-content">
                <a href="@Url.Action("Apply", "Filter", new { type = "availability", value = "" })" class="filter-category-button @(string.IsNullOrEmpty(Context.Request.Query["availability"]) ? "active" : "")" data-filter-type="availability" data-filter-value="">All</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "availability", value = "available" })" class="filter-category-button @(Context.Request.Query["availability"] == "available" ? "active" : "")" data-filter-type="availability" data-filter-value="available">Availability (@ViewBag.AvailableCount)</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "availability", value = "out-of-stock" })" class="filter-category-button @(Context.Request.Query["availability"] == "out-of-stock" ? "active" : "")" data-filter-type="availability" data-filter-value="out-of-stock">Out Of Stock (@ViewBag.OutOfStockCount)</a>
            </div>
        </div>
    </div>

    <!-- Gender Filter (Changed from Tags) -->
    <div class="filter-group">
        <a href="@Url.Action("ToggleFilterState", "Filter", new { filterType = "gender" })" class="custom-toggle-header filter-group-header @(IsFilterOpen("Gender") ? "is-active" : "")" style="cursor: pointer; display: block; text-decoration: none; color: inherit;">
            <span>Gender</span>
            <i class="fa-solid fa-chevron-down"></i>
        </a>
        <div class="custom-toggle-content" style="display: @(IsFilterOpen("Gender") ? "block" : "none");">
            <div class="filter-group-content filter-gender-grid">
                <a href="@Url.Action("Apply", "Filter", new { type = "gender", value = "" })" class="filter-category-button @(string.IsNullOrEmpty(Context.Request.Query["gender"]) ? "active" : "")" data-filter-type="gender" data-filter-value="">All</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "gender", value = "male" })" class="filter-category-button @(Context.Request.Query["gender"] == "male" ? "active" : "")" data-filter-type="gender" data-filter-value="male">Male</a>
                <a href="@Url.Action("Apply", "Filter", new { type = "gender", value = "female" })" class="filter-category-button @(Context.Request.Query["gender"] == "female" ? "active" : "")" data-filter-type="gender" data-filter-value="female">Female</a>
            </div>
        </div>
    </div>

</aside>
<style>
    /* Base styles for chevron rotation */
    .custom-toggle-header .fa-chevron-down {
        transition: transform 0.3s ease;
    }
    .custom-toggle-header.is-active .fa-chevron-down {
        transform: rotate(180deg);
    }

    /* Custom Toggle Content CSS */
    .custom-toggle-content {
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    /* Highlight active filters */
    .filter-category-button.active {
        background-color: #f0f0f0;
        font-weight: bold;
    }
    
    /* Uniform style for all filter buttons */
    .filter-category-button {
        display: block;
        width: 100%;
        padding: 8px 15px;
        margin-bottom: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
        text-align: center;
        text-decoration: none;
        color: #333;
        transition: all 0.2s ease;
    }
    
    .filter-category-button:hover {
        background-color: #f9f9f9;
    }
    
    /* Category Grid - 2 items per row */
    .filter-category-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 5px;
    }
    
    /* Colors Grid - 2 items per row */
    .filter-colors-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 5px;
    }
    
    /* Size Grid - 4 items in first row, 3 items in second row */
    .filter-size-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 5px;
    }
    .filter-size-grid > a:nth-child(5),
    .filter-size-grid > a:nth-child(6),
    .filter-size-grid > a:nth-child(7) {
        grid-column: span 1;
    }
    
    /* Collections Grid - 3 items in first row, 2 items in second row */
    .filter-collections-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 5px;
    }
    .filter-collections-grid > a:nth-child(4),
    .filter-collections-grid > a:nth-child(5) {
        grid-column: span 3/2;
    }
    
    /* Gender Grid - all 3 items in one row */
    .filter-gender-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 5px;
    }
</style>
