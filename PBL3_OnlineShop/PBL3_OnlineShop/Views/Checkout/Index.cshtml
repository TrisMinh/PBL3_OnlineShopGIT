@using PBL3_OnlineShop.Models.ViewModels
@model CheckoutView
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link rel="stylesheet" href="~/css/base.css">
    <link rel="stylesheet" href="~/css/Checkout.css">
    <style>
        .toast-message {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #f44336;
            color: white;
            padding: 15px;
            border-radius: 5px;
            z-index: 1000;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            max-width: 300px;
            animation: fadeOut 0.5s ease 5s forwards;
        }
        .toast-success {
            background-color: #4CAF50;
        }
        @@keyframes fadeOut {
            from {opacity: 1;}
            to {opacity: 0; display: none;}
        }
    </style>
</head>
<body>
    @if (TempData["Error"] != null)
    {
        <div class="toast-message">
            @TempData["Error"]
        </div>
    }
    @if (TempData["Success"] != null && !string.IsNullOrEmpty(TempData["Success"].ToString()) && !TempData["Success"].ToString().Contains("applied successfully"))
    {
        <div class="toast-message toast-success">
            @TempData["Success"]
        </div>
    }
    <div class="container">
        <div class="checkout-container">
            <div class="checkout-form-section">
                <h1 class="checkout-title">
                    <a href="/">
                        <span> Check Out</span>
                    </a>
                </h1>
            </div>
            <section class="info-section">
                <div class="info">
                    <h2 class="section-title">Information</h2>
                    <a class="change-btn">Change</a>
                </div>
                <h3 class="subsection-title">Contact info</h3>
                <div class="form-group">
                    <p>Your Name: @ViewBag.UserName</p>
                    <p>Email: @ViewBag.Email</p>
                    <p>Phone Number: @ViewBag.PhoneNumber</p>
                </div>
                <div class="shipping-address">
                    <h3 class="subsection-title">Shipping address</h3>
                    <div class="form-group">
                        @if (ViewBag.AddressDetail != null && ViewBag.District != null && ViewBag.Province != null)
                        {
                            <p>Detailed address: @ViewBag.AddressDetail</p>
                            <p>District: @ViewBag.District</p>
                            <p>Province/City: @ViewBag.Province</p>
                        }
                        else
                        {
                            <p>Địa chỉ: @ViewBag.Address</p>
                        }
                    </div>
                </div>
                <div class="coupon">
                    <div class="form payment">
                        <label for="payment-method">Payment Method</label>
                        <select id="payment-method" name="PaymentMethod">
                            <option value="">Choose Your Payment Method</option>
                            <option value="CreditCard">Credit Card</option>
                            <option value="COD">COD</option>
                        </select>
                    </div>
                </div>
            </section>

        </div>

        <div class="wrap">
            <div class="order-summary-section">
                <h2 class="summary-title">YOUR ORDER</h2>
                <div class="order-items">
                    @{
                        int quantity = 0;
                        string couponUsed = null;                        
                    }
                    @foreach (var item in Model.CartItems)
                    {
                        <div class="order-item">
                            @{
                                var image = item.ImageUrl?.Split(",", StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();
                                quantity += 1;
                            }
                            <img src="@Url.Content(image)" alt="@item.ProductName" class="item-image">
                            <div class="item-details">
                                <p class="item-name">@item.ProductName</p>
                                <p class="item-variant">@item.Color/@item.Size</p>
                                <span class="item-quantity">(@item.Quantity)</span>
                            </div>
                            <div class="item-price">$@item.SellingPrice</div>
                        </div>
                    }
                </div>
                <hr class="divider">
                <form method="post" asp-action="ApplyCoupon" style="display: flex; gap:10px;">
                    <div class="summary-line" style="gap:10px;">
                        <label class="coupon-label">
                            Coupon Code</label>
                            <input type="text" name="name" placeholder="Enter coupon code" />
                            <button type="submit" class="apply-coupon-button">Apply</button>
                    </div>
                    <div>
                        <span style="font-family: 'Beatrice Deck Trial', sans-serif; font-size: 12px; font-weight: 500;">@TempData["Success"]</span>
                    </div>
                </form>

                <div class="summary-line">
                    <span>Subtotal</span>
                    <span>$@Model.Subtotal</span>
                </div>
                <div class="summary-line">
                    <span>Shipping</span>
                    <span class="shipping-cost">$@Model.ShippingCost</span>
                </div>
                @if (Model.CouponUsed != null)
                {
                    <div class="summary-line">
                        <span>Coupon</span>
                        <span>-$@Model.Discount</span>
                    </div>
                    {
                        couponUsed = Model.CouponUsed;
                    }
                }
                <hr class="divider">
                <div class="summary-line total-line">
                    <span>Total</span>
                    <span>$@Model.TotalPrice</span>
                </div>
            </div>

            <div class="quantity">
                <span>(@quantity)</span>
            </div>
            <form asp-action="CreateOrder" method="post" id="checkoutForm">
                <input type="hidden" name="CouponUsed" value="@couponUsed" />
                <input type="hidden" name="PaymentMethod" id="payment-method-hidden" value="" />
                <button class="shipping-button">
                    <span>Order</span>
                </button>
            </form>
        </div>
    </div>
    </div>

    <script>
    // Hàm hiển thị thông báo lỗi
    function showToastMessage(message, isSuccess = false) {
        // Xóa toast message cũ nếu có
        const oldToast = document.querySelector('.toast-message');
        if (oldToast) {
            oldToast.remove();
        }
        
        // Tạo toast message mới
        const toast = document.createElement('div');
        toast.className = 'toast-message';
        if (isSuccess) {
            toast.classList.add('toast-success');
        }
        toast.textContent = message;
        
        // Thêm vào body
        document.body.appendChild(toast);
        
        // Tự động xóa sau 5 giây
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => {
                toast.remove();
            }, 500);
        }, 5000);
    }
    
    // Thêm kiểm tra phương thức thanh toán khi submit form
    document.getElementById('checkoutForm').addEventListener('submit', function(event) {
        // Kiểm tra xem có sản phẩm nào trong giỏ hàng không bị loại trừ
        const visibleCartItems = Array.from(document.querySelectorAll('.cart-item-inputs')).filter(item => item.getAttribute('data-excluded') !== 'true');
        console.log('Visible cart items:', visibleCartItems.length);
        
        if (visibleCartItems.length === 0) {
            event.preventDefault();
            showToastMessage('Không có sản phẩm nào trong giỏ hàng!');
            return false;
        }
        
        // Kiểm tra phương thức thanh toán
        const paymentMethod = document.getElementById('payment-method-hidden').value;
        if (!paymentMethod) {
            event.preventDefault();
            showToastMessage('Please select payment method');
            document.getElementById('payment-method').focus();
            return false;
        }
        
        // Đảm bảo chỉ những phần tử không bị loại trừ được gửi lên server
        document.querySelectorAll('.cart-item-inputs[data-excluded="true"]').forEach(item => {
            item.parentNode.removeChild(item);
        });
        
        // Cập nhật lại index của các cart items để đảm bảo chúng liên tục
        visibleCartItems.forEach((container, index) => {
            const inputs = container.querySelectorAll('input');
            inputs.forEach(input => {
                const name = input.name;
                const newName = name.replace(/CartItems\[\d+\]/, `CartItems[${index}]`);
                input.name = newName;
            });
        });
        
        console.log('Form is being submitted with', visibleCartItems.length, 'items');
        return true;
    });
    
    function removeItemFromCheckout(productId, size, color) {
        // Tìm và xóa item khỏi form checkout
        const itemContainer = document.querySelector(`.cart-item-inputs[data-product-id="${productId}"][data-size="${size}"][data-color="${color}"]`);
        if (itemContainer) {
            // Thay vì xóa trực tiếp,thì  dấu sản phẩm này không được đặt hàng rồi cho nó vào cart lại
            itemContainer.setAttribute('data-excluded', 'true');
            itemContainer.style.display = 'none';
        }
        
        // Tìm và xóa item khỏi hiển thị
        const orderItem = event.target.closest('.order-item');
        if (orderItem) {
            orderItem.remove();
        }
        
        // Cập nhật lại số lượng và tính toán lại tổng tiền
        recalculateTotal();
        
        // Ngăn chặn form submit
        event.preventDefault();
        return false;
    }
    
    function recalculateTotal() {
        // Cập nhật lại các inputs trong form
        const cartItemContainers = document.querySelectorAll('.cart-item-inputs');
        cartItemContainers.forEach((container, index) => {
            const inputs = container.querySelectorAll('input');
            inputs.forEach(input => {
                const name = input.name;
                const newName = name.replace(/CartItems\[\d+\]/, `CartItems[${index}]`);
                input.name = newName;
            });
        });
        
        // Cập nhật lại subtotal, quantity và total
        let subTotal = 0;
        let quantity = 0;
        
        document.querySelectorAll('.order-item').forEach(item => {
            const priceText = item.querySelector('.item-price').textContent;
            const price = parseFloat(priceText.replace('$', ''));
            const quantityText = item.querySelector('.item-quantity').textContent;
            const itemQuantity = parseInt(quantityText.replace(/[()]/g, ''));
            
            subTotal += price * itemQuantity;
            quantity += 1;
        });
        
        // Cập nhật subtotal hiển thị (tìm phần tử có nhãn "Subtotal")
        const subtotalElements = document.querySelectorAll('.summary-line');
        subtotalElements.forEach(element => {
            if (element.firstElementChild && element.firstElementChild.textContent === 'Subtotal') {
                element.lastElementChild.textContent = '$' + subTotal.toFixed(2);
            }
        });
        
        // Lấy giá shipping
        const shippingText = document.querySelector('.shipping-cost').textContent;
        const shippingCost = parseFloat(shippingText.replace('$', ''));
        
        // Lấy giảm giá nếu có
        let discount = 0;
        const discountElements = document.querySelectorAll('.summary-line');
        discountElements.forEach(element => {
            if (element.firstElementChild && element.firstElementChild.textContent === 'Coupon') {
                const discountText = element.lastElementChild.textContent;
                discount = parseFloat(discountText.replace('-$', ''));
            }
        });
        
        // Cập nhật tổng tiền
        const totalPrice = subTotal + shippingCost - discount;
        
        // Tìm phần tử hiển thị tổng tiền (có nhãn "Total")
        const totalElements = document.querySelectorAll('.summary-line');
        totalElements.forEach(element => {
            if (element.firstElementChild && element.firstElementChild.textContent === 'Total') {
                element.lastElementChild.textContent = '$' + totalPrice.toFixed(2);
            }
        });
        
        // Cập nhật số lượng sản phẩm
        const quantityElement = document.querySelector('.quantity span');
        if (quantityElement) {
            quantityElement.textContent = `(${quantity})`;
        }
        
        // Cập nhật giá trị input hidden
        const totalPriceInput = document.querySelector('input[name="TotalPrice"]');
        if (totalPriceInput) {
            totalPriceInput.value = totalPrice.toFixed(2);
        }
        
        console.log("Recalculated: Subtotal=" + subTotal + ", Shipping=" + shippingCost + ", Discount=" + discount + ", Total=" + totalPrice);
    }

    // Cập nhật giá trị PaymentMethod khi người dùng thay đổi
    document.addEventListener('DOMContentLoaded', function() {
        const paymentMethodSelect = document.getElementById('payment-method');
        const paymentMethodHidden = document.getElementById('payment-method-hidden');
        
        // Cập nhật giá trị ban đầu
        if (paymentMethodSelect && paymentMethodHidden) {
            paymentMethodHidden.value = paymentMethodSelect.value;
            
            // Lắng nghe sự kiện thay đổi
            paymentMethodSelect.addEventListener('change', function() {
                paymentMethodHidden.value = this.value;
            });
        }
    });
    </script>
</body>
</html>
